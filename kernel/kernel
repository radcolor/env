#!/usr/bin/env bash

# Copyright (C) 2020 Shashank Baghel under GPLv3
# Personal kernel CI build script for https://github.com/theradcolor/android_kernel_xiaomi_whyred

# Set enviroment and vaiables

DATE="$(date +%d%m%Y-%H%M%S)"
CHANNEL_ID="-1001487815579"
GRP_CHAT_ID="-1001375712567"
WD="/home/theradcolor/whyred"
OUT=${WD}"/out"
KERNEL_DIR=${WD}"/kernel"
ANYKERNEL_DIR=${WD}"/AnyKernel3"
IMG=${OUT}"/arch/arm64/boot/Image.gz-dtb"

function checkout_source() {
    # Checkout to kernel source
    cd "${KERNEL_DIR}"
}

function set_param_gcc() {
    #Export compiler dir.
    export CROSS_COMPILE=$WD"/aarch64-gcc/bin/aarch64-linux-gnu-"
    export CROSS_COMPILE_ARM32=$WD"/arm-gcc/bin/arm-linux-gnueabi-"

    # Export ARCH <arm, arm64, x86, x86_64>
    export ARCH=arm64
    #Export SUBARCH <arm, arm64, x86, x86_64>
    export SUBARCH=arm64

    # Kbuild host and user
    export KBUILD_BUILD_USER="shashank"
    export KBUILD_BUILD_HOST="archlinux"
    export KBUILD_JOBS="$(($(grep -c '^processor' /proc/cpuinfo) + 1))"

    COMPILER_STRING="$(${WD}"/aarch64-gcc/bin/aarch64-linux-gnu-gcc" --version | head -n 1)"
    export KBUILD_COMPILER_STRING="${COMPILER_STRING}"
}

function set_param_clang() {
    # Export ARCH <arm, arm64, x86, x86_64>
    export ARCH=arm64
    #Export SUBARCH <arm, arm64, x86, x86_64>
    export SUBARCH=arm64

    # Kbuild host and user
    export KBUILD_BUILD_USER="shashank"
    export KBUILD_BUILD_HOST="archlinux"
    export KBUILD_JOBS="$(($(grep -c '^processor' /proc/cpuinfo) + 1))"

    # Compiler
    TC=$WD/clang/bin/clang
    CLANG_DIR=$WD/clang
    GCC32=$WD/clang/bin/arm-linux-gnueabi-
    GCC64=$WD/clang/bin/aarch64-linux-gnu-
    GCC64_TYPE=aarch64-linux-gnu-

    COMPILER_STRING="$(${TC} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' | sed 's/ *$//')"
    export KBUILD_COMPILER_STRING="${COMPILER_STRING}"
}

function set_param_aosp_clang() {
    # Export ARCH <arm, arm64, x86, x86_64>
    export ARCH=arm64
    #Export SUBARCH <arm, arm64, x86, x86_64>
    export SUBARCH=arm64

    # Kbuild host and user
    export KBUILD_BUILD_USER="shashank"
    export KBUILD_BUILD_HOST="archlinux"
    export KBUILD_JOBS="$(($(grep -c '^processor' /proc/cpuinfo) + 1))"

    COMPILER_STRING="$(${CC} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
    export KBUILD_COMPILER_STRING="${COMPILER_STRING}"
}

function build_gcc() {
    checkout_source
    set_param_gcc

    # Check kernel type
    check_kernel_type

    # Patch kernel for LTO
    lto_patches

    make O="${OUT}" "${CONFIG}"

    BUILD_START=$(date +"%s")

    # Build
    make O="${OUT}" -j"${KBUILD_JOBS}"

    BUILD_END=$(date +"%s")
    DIFF=$(($BUILD_END - $BUILD_START))

    if [ -f "${IMG}" ]; then
        echo "Build completed in $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)."
        flash_zip
    else
        echo "Build failed, please fix the errors first bish!"
    fi
}

function build_clang() {
    checkout_source
    set_param_clang

    # Check kernel type
    check_kernel_type

    # Patch kernel for LTO
    lto_patches

    make O="$OUT" ${CONFIG}

    BUILD_START=$(date +"%s")

    #Build
    make -j"${KBUILD_JOBS}" O=$OUT CC="${TC}" LLVM_AR="${CLANG_DIR}/bin/llvm-ar" LLVM_NM="${CLANG_DIR}/bin/llvm-nm" LD="${CLANG_DIR}/bin/ld.lld" OBJCOPY="${CLANG_DIR}/bin/llvm-objcopy" OBJDUMP="${CLANG_DIR}/bin/llvm-objdump" STRIP="${CLANG_DIR}/bin/llvm-strip" CROSS_COMPILE="${GCC64}" CROSS_COMPILE_ARM32="${GCC32}" CLANG_TRIPLE="${GCC64_TYPE}"

    BUILD_END=$(date +"%s")
    DIFF=$(($BUILD_END - $BUILD_START))

    if [ -f "${IMG}" ]; then
        echo "Build completed in $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)."
        flash_zip
    else
        echo "Build failed, please fix the errors first bish!"
    fi
}

function build_proton_clang() {
    checkout_source
    set_param_clang

    # Check kernel type
    check_kernel_type

    # Patch kernel for LTO
    lto_patches

    make O="$OUT" ${CONFIG}

    BUILD_START=$(date +"%s")

    # Build
    make -j"${KBUILD_JOBS}" O=$OUT CC="${TC}" LLVM_AR="llvm-ar" LLVM_NM="llvm-nm" LD="ld.lld" OBJCOPY="llvm-objcopy" OBJDUMP="llvm-objdump" STRIP="llvm-strip" CROSS_COMPILE="${GCC64}" CROSS_COMPILE_ARM32="${GCC32}" CLANG_TRIPLE="${GCC64_TYPE}"

    BUILD_END=$(date +"%s")
    DIFF=$(($BUILD_END - $BUILD_START))

    if [ -f "${IMG}" ]; then
        echo "Build completed in $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)."
        flash_zip
    else
        echo "Build failed, please fix the errors first bish!"
    fi
}

function build_aosp_clang() {
    checkout_source
    set_param_aosp_clang

    # Check kernel type
    check_kernel_type

    # Patch kernel for LTO
    lto_patches

    make O="$OUT" ${CONFIG}

    BUILD_START=$(date +"%s")

    # Build
    make -j"${KBUILD_JOBS}" O=$OUT ARCH=arm64 CC="clang" LLVM_AR="llvm-ar" LLVM_NM="llvm-nm" LD="ld.lld" OBJCOPY="llvm-objcopy" OBJDUMP="llvm-objdump" STRIP="llvm-strip" CLANG_TRIPLE="aarch64-linux-gnu-" CROSS_COMPILE=$WD"/gcc64/bin/aarch64-linux-android-" CROSS_COMPILE_ARM32=$WD"/gcc32/bin/arm-linux-androideabi-"

    if [ -f "${IMG}" ]; then
        BUILD_END=$(date +"%s")
        DIFF=$(($BUILD_END - $BUILD_START))
        echo "Build completed in $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds."
        flash_zip
    else
        echo "Build failed, please fix the errors first bish!"
    fi
}

function flash_zip() {
    echo "Now making a flashable zip of kernel with AnyKernel3"

    # Check camera type oldcam/newcam
    check_camera

    if [ ${KERNEL_TYPE} == "fakerad" ]; then
        export ZIPNAME=fci-${TYPE}-${CAM_TYPE}-${DATE}
    else
        export ZIPNAME=ci-${TYPE}-${CAM_TYPE}-${DATE}
    fi

    # Checkout anykernel3 dir
    cd "${ANYKERNEL_DIR}"

    if [ ${TYPE} == "hmp" ]; then
        git checkout ak-hmp
    else
        git checkout ak-eas
    fi

    # Patch anykernel3
    #patch_anykernel

    # Patch anykernel3 string
    #patch_anykernel_string

    # Copy Image.gz-dtb to dir.
    cp ${OUT}/arch/arm64/boot/Image.gz-dtb ${ANYKERNEL_DIR}/

    # Build a flashable zip
    zip -r9 ${ZIPNAME} * -x README.md .git

    # Sign the zip
    # sign_zip

    if [ ${KERNEL_TYPE} == "fakerad" ]; then
        SHA256=$(sha256sum fci-*.zip | cut -d' ' -f1)
    else
        SHA256=$(sha256sum ci-*.zip | cut -d' ' -f1)
    fi

    # Push zip(s) to telegram
    # tg_push
}

function check_camera() {
    CAMERA="$(grep 'BLOBS' ${KERNEL_DIR}/arch/arm64/configs/${CONFIG})"
    if [ ${CAMERA} == "CONFIG_XIAOMI_NEW_CAMERA_BLOBS=y" ]; then
        export CAM_TYPE="newcam"
    elif [ ${CAMERA} == "CONFIG_XIAOMI_NEW_CAMERA_BLOBS=n" ]; then
        export CAM_TYPE="oldcam"
    fi
}

function check_kernel_type() {
    KERNEL_TYPE="$(grep 'LOCALVERSION=' ${KERNEL_DIR}/arch/arm64/configs/${CONFIG})"
    KERNEL_TYPE=$(echo "${KERNEL_TYPE}" | cut -d'"' -f 2)
    if [[ ${KERNEL_TYPE} == *"-rad-v"* ]]; then
        export TYPE=hmp
        export KERNEL_TYPE=rad
    elif [[ ${KERNEL_TYPE} == *"-rad-x"* ]]; then
        export TYPE=eas
        export KERNEL_TYPE=rad
    elif [[ ${KERNEL_TYPE} == *"-fakerad"* ]]; then
        export TYPE=eas
        export KERNEL_TYPE=fakerad
    fi
}

function sign_zip() {
    curl -sLo zipsigner-3.0.jar https://raw.githubusercontent.com/baalajimaestro/AnyKernel2/master/zipsigner-3.0.jar
    java -jar zipsigner-3.0.jar ${ZIPNAME}.zip ${ZIPNAME}-signed.zip
    rm -rf "${ZIPNAME}.zip"
}

function lto_patches() {
    if [ "${LTO}" == "true" ]; then
        if [ "${COMPILER}" == "gnu-gcc" ]; then

            if [ "${KERNEL_TYPE}" == "fakerad" ]; then
                curl https://raw.githubusercontent.com/theradcolor/patches/master/fakerad-gcc-lto-patch.patch | git am
                rm -rf *.patch
            else
                # GCC LTO patches for kernel
                curl https://raw.githubusercontent.com/theradcolor/patches/master/rad-kernel-gcc-lto-patch.patch | git am
                rm -rf *.patch
            fi

        elif [ "${COMPILER}" == "proton-clang" ]; then

            if [ "${KERNEL_TYPE}" == "fakerad" ]; then
                curl https://raw.githubusercontent.com/theradcolor/patches/master/fakerad-clang-lto-patch.patch | git am
                rm -rf *.patch
            else
                # CLANG LTO patches for kernel
                curl https://raw.githubusercontent.com/theradcolor/patches/master/rad-kernel-clang-lto-patch.patch | git am
            fi

        elif [ "${COMPILER}" == "aosp-clang" ]; then

            if [ "${KERNEL_TYPE}" == "fakerad" ]; then
                curl https://raw.githubusercontent.com/theradcolor/patches/master/fakerad-clang-lto-patch.patch | git am
                rm -rf *.patch
            else
                # CLANG LTO patches for kernel
                curl https://raw.githubusercontent.com/theradcolor/patches/master/rad-kernel-clang-lto-patch.patch | git am
            fi
        else
            echo "Compiler not specified"
        fi
    else
        echo "Skipping LTO patches!"
    fi
}

for i in "$@"; do
    case $i in
    --oldcam)
        CONFIG="whyred_defconfig"
        shift
        ;;
    --newcam)
        CONFIG="whyred-newcam_defconfig"
        shift
        ;;
    --fakerad)
        CONFIG="fakerad_defconfig"
        shift
        ;;
    --gcc)
        COMPILER="gnu-gcc"
        shift
        ;;
    --gcc-stable)
        GCC_BRANCH="stable-gcc"
        shift
        ;;
    --gcc-master)
        GCC_BRANCH="master"
        shift
        ;;
    --clang)
        COMPILER="clang"
        shift
        ;;
    --aosp-clang)
        COMPILER="aosp-clang"
        shift
        ;;
    --proton-clang)
        COMPILER="proton-clang"
        shift
        ;;
    --lto)
        LTO="true"
        shift
        ;;
    *)
        # unknown option
        echo "Unknown option(s)"
        exit
        ;;
    esac
done

# Start Build (build_clang/build_aosp_clang/build_proton_clang/build_gcc)
if [ "${COMPILER}" == "gnu-gcc" ]; then
    build_gcc
elif [ "${COMPILER}" == "clang" ]; then
    build_clang
elif [ "${COMPILER}" == "aosp-clang" ]; then
    build_aosp_clang
elif [ "${COMPILER}" == "proton-clang" ]; then
    build_proton_clang
else
    build_gcc
    CONFIG="whyred_defconfig"
    echo "Compiler not specified"
fi
